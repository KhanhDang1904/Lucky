function AjaxPost(url, callback = function () {}, params = {}) {    $.ajax({        url: url,        type: 'post',        data: params,        contentType: false,        processData: false,        beforeSend: function () {        },        success: function (data) {            callback(data)        },        complete: function () {        },        error: function (r1, r2) {            toastr.error(r1.responseJSON.message, {                CloseButton: true,                ProgressBar: true            });        }    })}function AjaxGet(url, callback = function () {}, params = {}) {    $.ajax({        url: url,        type: 'get',        data: params,        beforeSend: function () {        },        success: function (data) {            callback(data)        },        complete: function () {        },        error: function (r1, r2) {            toastr.error(r1.responseJSON.message, {                CloseButton: true,                ProgressBar: true            });        }    })}function pagination($elm, $function) {    $($elm + ' .pagination li a').each(function () {        $url = $(this).attr('href');        $(this).attr('href', "#").attr('onclick', $function + "('" + $url + "','" + $elm + "')")    })}function deleteRow($url, $id) {    Swal.fire({        title: "Are you sure?",        text: "Are you sure to delete this data!",        icon: "warning",        showCancelButton: true,        confirmButtonColor: "#3085d6",        cancelButtonColor: "#d33",        confirmButtonText: "Confirm"    }).then((result) => {        if (result.isConfirmed) {            $data = new FormData();            $data.append('id', $id);            $data.append('_csrf-backend', $("#token_form").val());            AjaxPost($url, function (data) {                toastr.success(data.message, {                    CloseButton: true,                    ProgressBar: true                });                setTimeout(function () {                    location.reload();                }, 1000)            }, $data)        }    });}function loadNumber() {    if ($(".numeral-mask").length) {        $(".numeral-mask").each(function () {            new Cleave(this, {                numeral: true,                numeralThousandsGroupStyle: 'thousand'            });        })    }}function readURL(input, id) {    if (input.files && input.files[0]) {        var reader = new FileReader();        reader.onload = function (e) {            const img = new Image();            img.src = e.target.result;            img.onload = function () {                if (img.width === 400 && img.height === 800) {                    $(".btn-submit").removeClass('d-none');                } else {                    $(".btn-submit").addClass('d-none');                    toastr.error('Image size is incorrect. Please upload an image with size 400x800 pixels.', {                        CloseButton: true,                        ProgressBar: true                    });                }                $(id).attr('src', e.target.result);            }        };        reader.readAsDataURL(input.files[0]);    }}